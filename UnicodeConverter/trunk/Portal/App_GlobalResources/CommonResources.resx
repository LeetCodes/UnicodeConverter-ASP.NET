<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutBlogLabel" xml:space="preserve">
    <value>Blog :</value>
  </data>
  <data name="AboutDescription" xml:space="preserve">
    <value>Unicode Converter is a free open source software for converting to/from unicode and also getting information about a character.</value>
  </data>
  <data name="AboutDevelopersLabel" xml:space="preserve">
    <value>Developers and Designers :</value>
  </data>
  <data name="AbouteMailLabel" xml:space="preserve">
    <value>e-Mail :</value>
  </data>
  <data name="AboutLastVersionLabel" xml:space="preserve">
    <value>Last Version Date :</value>
  </data>
  <data name="AboutProjectHostLabel" xml:space="preserve">
    <value>Project Host :</value>
  </data>
  <data name="AboutProjectLicenseLabel" xml:space="preserve">
    <value>Project License :</value>
  </data>
  <data name="AboutProjectManagerLabel" xml:space="preserve">
    <value>Project Manager :</value>
  </data>
  <data name="AboutProjectURL" xml:space="preserve">
    <value>Project URL :</value>
  </data>
  <data name="AboutTitle" xml:space="preserve">
    <value>About Unicode Converter</value>
  </data>
  <data name="AboutVersionLabel" xml:space="preserve">
    <value>Version :</value>
  </data>
  <data name="ApplicationDirection" xml:space="preserve">
    <value>LTR</value>
  </data>
  <data name="ConvertFromUnicode" xml:space="preserve">
    <value>Convert From Unicode</value>
  </data>
  <data name="ConvertFromUnicodeDeCode" xml:space="preserve">
    <value>Decode</value>
  </data>
  <data name="ConvertFromUnicodeMainText" xml:space="preserve">
    <value>To decode a byte or a bytecode stream back to Original unicode scheme, put the code or bytecode into the Bytes box and then press the Decode button. note that you should put the correct byte code into the Bytes box, each unicode character have four digit, for example 066C represent for 'ی' and if you put just 66C you may face another character. so in the string that you put into the Bytes box, check the codes. for more info about each character you can use from Unicode Information Tab.</value>
  </data>
  <data name="ConvertFromUnicodeTitle" xml:space="preserve">
    <value>Convert From Unicode</value>
  </data>
  <data name="ConvertToUnicode" xml:space="preserve">
    <value>Convert To Unicode</value>
  </data>
  <data name="ConvertToUnicodeConvert" xml:space="preserve">
    <value>Convert</value>
  </data>
  <data name="ConvertToUnicodeHexCode" xml:space="preserve">
    <value>Hex Code :</value>
  </data>
  <data name="ConvertToUnicodeMainText" xml:space="preserve">
    <value>To convert a character, word, Scentense or a paragraph enter put your text within the Words box and then press Convert Button. the Unicode per character code, will display in the result box. note that what you see and the result may be different, it is a commonly event. for resolving this issue you can select an exact part of generated result code, and then put it in the Convert From Unicode Section, then compare the unicode Character Code, and Your special Character and the character that application has generated.</value>
  </data>
  <data name="ConvertToUnicodeTitle" xml:space="preserve">
    <value>Convert To Unicode</value>
  </data>
  <data name="ConvertToUnicodeWords" xml:space="preserve">
    <value>Words :</value>
  </data>
  <data name="HelpAndHowTo" xml:space="preserve">
    <value>Help And How To</value>
  </data>
  <data name="Standards" xml:space="preserve">
    <value>Standards</value>
  </data>
  <data name="StandardsListResultTitle" xml:space="preserve">
    <value>Standard Keyboard Layout Information</value>
  </data>
  <data name="StandardsListTopTitle" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="StandardsList_Country" xml:space="preserve">
    <value>Country :</value>
  </data>
  <data name="StandardsList_KeyboardLayout" xml:space="preserve">
    <value>Keyboard Layout :</value>
  </data>
  <data name="StandardsList_License" xml:space="preserve">
    <value>License :</value>
  </data>
  <data name="StandardsList_Producer" xml:space="preserve">
    <value>Producer :</value>
  </data>
  <data name="StandardsList_ProjectURL" xml:space="preserve">
    <value>Project URL :</value>
  </data>
  <data name="StandardsList_Referer" xml:space="preserve">
    <value>Referer :</value>
  </data>
  <data name="StandardsList_RefererMail" xml:space="preserve">
    <value>Referer Mail :</value>
  </data>
  <data name="StandardsList_StandardDate" xml:space="preserve">
    <value>Standard Date :</value>
  </data>
  <data name="StandardsTitle" xml:space="preserve">
    <value>Standards and Documentation</value>
  </data>
  <data name="UnicodeInformation" xml:space="preserve">
    <value>Unicode Information</value>
  </data>
  <data name="UnicodeInformationAddToWordButton" xml:space="preserve">
    <value>Add To Word</value>
  </data>
  <data name="UnicodeInformationCategoryLabel" xml:space="preserve">
    <value>Category :</value>
  </data>
  <data name="UnicodeInformationCharLabel" xml:space="preserve">
    <value>Char :</value>
  </data>
  <data name="UnicodeInformationDecimalLabel" xml:space="preserve">
    <value>Decimal :</value>
  </data>
  <data name="UnicodeInformationGetDecimalInfoButton" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="UnicodeInformationGetHexCodeInfoButton" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="UnicodeInformationHexCodeLabel" xml:space="preserve">
    <value>Hex Code :</value>
  </data>
  <data name="UnicodeInformationInformationButton" xml:space="preserve">
    <value>Information</value>
  </data>
  <data name="UnicodeInformationIsBidiLabel" xml:space="preserve">
    <value>Is BIDI ?</value>
  </data>
  <data name="UnicodeInformationNameLabel" xml:space="preserve">
    <value>Name :</value>
  </data>
  <data name="UnicodeInformationRangeLabel" xml:space="preserve">
    <value>Range :</value>
  </data>
  <data name="UnicodeInformationResultsLabel" xml:space="preserve">
    <value>Unicode Hex Code and Final Text</value>
  </data>
  <data name="UnicodeInformationShapeLabel" xml:space="preserve">
    <value>Shape :</value>
  </data>
  <data name="UnicodeInformationTitle" xml:space="preserve">
    <value>Unicode Information</value>
  </data>
  <data name="UnicodeInformationTypeLabel" xml:space="preserve">
    <value>Type :</value>
  </data>
</root>